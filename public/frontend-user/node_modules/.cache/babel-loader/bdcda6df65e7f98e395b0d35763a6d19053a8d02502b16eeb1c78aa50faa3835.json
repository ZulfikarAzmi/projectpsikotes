{"ast":null,"code":"'use client';\n\nimport { jsx, jsxs } from 'react/jsx-runtime';\nimport { forwardRef, useState } from 'react';\nimport { FaCheck, FaClipboardList } from 'react-icons/fa6';\nimport { twMerge } from 'tailwind-merge';\nimport { mergeDeep } from '../../helpers/merge-deep.mjs';\nimport { getTheme } from '../../theme-store/index.mjs';\nimport { copyToClipboard } from './helpers.mjs';\nconst ClipboardWithIconText = forwardRef(({\n  valueToCopy,\n  icon: Icon = FaClipboardList,\n  label = \"Copy\",\n  theme: customTheme = {},\n  className,\n  ...rest\n}, ref) => {\n  const [isJustCopied, setIsJustCopied] = useState(false);\n  const theme = mergeDeep(getTheme().clipboard.withIconText, customTheme);\n  return /* @__PURE__ */jsx(\"button\", {\n    className: twMerge(theme.base, className),\n    onClick: () => copyToClipboard(valueToCopy, setIsJustCopied),\n    ...rest,\n    ref,\n    children: isJustCopied ? /* @__PURE__ */jsxs(\"span\", {\n      className: theme.label.base,\n      children: [/* @__PURE__ */jsx(FaCheck, {\n        \"aria-hidden\": true,\n        className: theme.icon.successIcon\n      }), /* @__PURE__ */jsx(\"span\", {\n        className: theme.label.successText,\n        children: \"Copied\"\n      })]\n    }) : /* @__PURE__ */jsxs(\"span\", {\n      className: theme.label.base,\n      children: [/* @__PURE__ */jsx(Icon, {\n        \"aria-hidden\": true,\n        className: theme.icon.defaultIcon\n      }), /* @__PURE__ */jsx(\"span\", {\n        className: theme.label.defaultText,\n        children: label\n      })]\n    })\n  });\n});\nexport { ClipboardWithIconText };","map":{"version":3,"names":["ClipboardWithIconText","forwardRef","valueToCopy","icon","Icon","FaClipboardList","label","theme","customTheme","className","rest","ref","isJustCopied","setIsJustCopied","useState","mergeDeep","getTheme","clipboard","withIconText","jsx","twMerge","base","onClick","copyToClipboard","children","jsxs","FaCheck","successIcon","successText","defaultIcon","defaultText"],"sources":["/Users/nayalabina/project-cbt/node_modules/flowbite-react/src/components/Clipboard/ClipboardWithIconText.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, useState, type ComponentProps, type FC } from \"react\";\nimport { FaCheck, FaClipboardList } from \"react-icons/fa6\";\nimport { twMerge } from \"tailwind-merge\";\nimport { mergeDeep } from \"../../helpers/merge-deep\";\nimport { getTheme } from \"../../theme-store\";\nimport type { DeepPartial } from \"../../types\";\nimport { copyToClipboard } from \"./helpers\";\n\nexport interface FlowbiteClipboardWithIconTextTheme {\n  base: string;\n  label: {\n    base: string;\n    defaultText: string;\n    successText: string;\n  };\n  icon: {\n    defaultIcon: string;\n    successIcon: string;\n  };\n}\n\nexport interface ClipboardWithIconTextProps extends ComponentProps<\"button\"> {\n  valueToCopy: string;\n  label?: string;\n  icon?: FC<ComponentProps<\"svg\">>;\n  theme?: DeepPartial<FlowbiteClipboardWithIconTextTheme>;\n}\n\nexport const ClipboardWithIconText = forwardRef<HTMLButtonElement, ClipboardWithIconTextProps>(\n  ({ valueToCopy, icon: Icon = FaClipboardList, label = \"Copy\", theme: customTheme = {}, className, ...rest }, ref) => {\n    const [isJustCopied, setIsJustCopied] = useState(false);\n\n    const theme = mergeDeep(getTheme().clipboard.withIconText, customTheme);\n\n    return (\n      <button\n        className={twMerge(theme.base, className)}\n        onClick={() => copyToClipboard(valueToCopy, setIsJustCopied)}\n        {...rest}\n        ref={ref}\n      >\n        {isJustCopied ? (\n          <span className={theme.label.base}>\n            <FaCheck aria-hidden className={theme.icon.successIcon} />\n            <span className={theme.label.successText}>Copied</span>\n          </span>\n        ) : (\n          <span className={theme.label.base}>\n            <Icon aria-hidden className={theme.icon.defaultIcon} />\n            <span className={theme.label.defaultText}>{label}</span>\n          </span>\n        )}\n      </button>\n    );\n  },\n);\n"],"mappings":";;;;;;;;;AAUA,MAAKA,qBAAmB,GAAIC,UAAG,CAC/B;EAAIC,WAAO;EAAAC,IAAA,EAAYC,IAAE,GAAAC,eAAmB;EAAAC,KAAS,SAAO;EAAAC,KAAA,EAAAC,WAAA;EAAAC,SAAA;EAAA,GAAAC;AAAA,GAAAC,GAAA;EACxD,MAAM,CAAAC,YAAQ,EAAAC,eAAqB,IAAAC,QAAU;EAC7C,MAAAP,KAAA,GAAAQ,SAAuB,CAAAC,QAAG,GAAAC,SAAA,CAAAC,YAAA,EAAAV,WAAA;EAC9B,OAAM,eAAQW,GAAA,CACR,UACN;IACQV,SAAS,EAAAW,OAAM,CAAAb,KAAA,CAAAc,IAAA,EAAgBZ,SAAA;IAC/Ba,OAAO,EAAAA,CAAA,KAAAC,eAAA,CAAArB,WAAA,EAAAW,eAAA;IACP,GAAGH,IAAA;IACHC,GAAA;IACRa,QAAA,EAAAZ,YAA8B,kBAAWa,IAAA,CAAa,MAAM,EAAE;MAAAhB,SAAW,EAAAF,KAAM,CAAAD,KAAK,CAAAe,IAAA;MAAAG,QAAc,GAClG,eAA0BL,GAAG,CAACO,OAAM,EAAE;QAAE,aAAW,EAAK,IAAC;QAAKjB,SAAC,EAAAF,KAAa,CAAAJ,IAAA,CAAQwB;MAAY,CAAC,GACxF,eAAGR,GAAA,OAAwB;QAAAV,SAAU,EAAAF,KAAS,CAAED,KAAK,CAACsB,WAAU;QAAEJ,QAAQ,EAAE;MAAA;IACrF,oBAA8BC,IAAI,CAAE,MAAE;MAAAhB,SAAe,EAAIF,KAAE,CAAAD,KAAS,CAAAe,IAAE;MAAKG,QAAM,GACjF,eAA0BL,GAAG,CAACf,IAAA,EAAM;QAAE,aAAa,MAAM;QAAAK,SAAM,EAAAF,KAAW,CAAEJ,IAAA,CAAA0B;MAAiB,CAAC,GACrF,eAAGV,GAAA;QAAAV,SAAA,EAAAF,KAAA,CAAAD,KAAA,CAAAwB,WAAA;QAAAN,QAAA,EAAAlB;MAAA;IACL;EACD,CACH;AACH,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}