{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef, useState } from 'react';\nimport { twMerge } from 'tailwind-merge';\nimport { mergeDeep } from '../../helpers/merge-deep.mjs';\nimport { getTheme } from '../../theme-store/index.mjs';\nimport { Tooltip } from '../Tooltip/Tooltip.mjs';\nimport { ClipboardWithIcon } from './ClipboardWithIcon.mjs';\nimport { ClipboardWithIconText } from './ClipboardWithIconText.mjs';\nimport { copyToClipboard } from './helpers.mjs';\nconst ClipboardComponent = forwardRef(({\n  className,\n  valueToCopy,\n  label,\n  theme: customTheme = {},\n  ...rest\n}, ref) => {\n  const [isJustCopied, setIsJustCopied] = useState(false);\n  const theme = mergeDeep(getTheme().clipboard.button, customTheme);\n  return /* @__PURE__ */jsx(Tooltip, {\n    content: isJustCopied ? \"Copied\" : \"Copy to clipboard\",\n    className: \"[&_*]:cursor-pointer\",\n    children: /* @__PURE__ */jsx(\"button\", {\n      className: twMerge(theme.base, className),\n      onClick: () => copyToClipboard(valueToCopy, setIsJustCopied),\n      ...rest,\n      ref,\n      children: /* @__PURE__ */jsx(\"span\", {\n        className: theme.label,\n        children: label\n      })\n    })\n  });\n});\nClipboardComponent.displayName = \"Clipboard\";\nClipboardWithIcon.displayName = \"Clipboard.WithIcon\";\nClipboardWithIconText.displayName = \"Clipboard.WithIconText\";\nconst Clipboard = Object.assign(ClipboardComponent, {\n  WithIcon: ClipboardWithIcon,\n  WithIconText: ClipboardWithIconText\n});\nexport { Clipboard };","map":{"version":3,"names":["ClipboardComponent","forwardRef","className","valueToCopy","label","theme","customTheme","rest","ref","isJustCopied","setIsJustCopied","useState","mergeDeep","getTheme","clipboard","button","jsx","Tooltip","content","children","twMerge","base","onClick","copyToClipboard","displayName","ClipboardWithIcon","ClipboardWithIconText","Clipboard","Object","assign","WithIcon","WithIconText"],"sources":["/Users/nayalabina/project-cbt/node_modules/flowbite-react/src/components/Clipboard/Clipboard.tsx"],"sourcesContent":["\"use client\";\n\nimport { forwardRef, useState, type ComponentProps, type ReactNode } from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport { mergeDeep } from \"../../helpers/merge-deep\";\nimport { getTheme } from \"../../theme-store\";\nimport type { DeepPartial } from \"../../types\";\nimport { Tooltip } from \"../Tooltip\";\nimport { ClipboardWithIcon } from \"./ClipboardWithIcon\";\nimport type { FlowbiteClipboardWithIconTheme } from \"./ClipboardWithIcon\";\nimport { ClipboardWithIconText } from \"./ClipboardWithIconText\";\nimport type { FlowbiteClipboardWithIconTextTheme } from \"./ClipboardWithIconText\";\nimport { copyToClipboard } from \"./helpers\";\n\nexport interface FlowbiteClipboardTheme {\n  button: {\n    base: string;\n    label: string;\n  };\n  withIcon: FlowbiteClipboardWithIconTheme;\n  withIconText: FlowbiteClipboardWithIconTextTheme;\n}\n\nexport interface ClipboardProps extends ComponentProps<\"button\"> {\n  valueToCopy: string;\n  label?: ReactNode;\n  theme?: DeepPartial<FlowbiteClipboardTheme>;\n}\n\nconst ClipboardComponent = forwardRef<HTMLButtonElement, ClipboardProps>(\n  ({ className, valueToCopy, label, theme: customTheme = {}, ...rest }, ref) => {\n    const [isJustCopied, setIsJustCopied] = useState(false);\n\n    const theme = mergeDeep(getTheme().clipboard.button, customTheme);\n\n    return (\n      <Tooltip content={isJustCopied ? \"Copied\" : \"Copy to clipboard\"} className=\"[&_*]:cursor-pointer\">\n        <button\n          className={twMerge(theme.base, className)}\n          onClick={() => copyToClipboard(valueToCopy, setIsJustCopied)}\n          {...rest}\n          ref={ref}\n        >\n          <span className={theme.label}>{label}</span>\n        </button>\n      </Tooltip>\n    );\n  },\n);\n\nClipboardComponent.displayName = \"Clipboard\";\nClipboardWithIcon.displayName = \"Clipboard.WithIcon\";\nClipboardWithIconText.displayName = \"Clipboard.WithIconText\";\n\nexport const Clipboard = Object.assign(ClipboardComponent, {\n  WithIcon: ClipboardWithIcon,\n  WithIconText: ClipboardWithIconText,\n});\n"],"mappings":";;;;;;;;;;;AAYA,MAAKA,kBAAW,GAAWC,UAAS,CACpC;EAAIC,SAAO;EAAAC,WAAc;EAAAC,KAAA;EAAAC,KAAgB,EAAAC,WAAY,IAAK,CAAC;EAAC,GAAAC;AAAA,GAAAC,GAAA;EACxD,MAAM,CAAAC,YAAQ,EAAAC,eAAqB,IAAAC,QAAU,MAAQ;EACrD,MAAAN,KAAA,GAAAO,SAAuB,CAAAC,QAAI,EAAO,CAAAC,SAAI,CAAOC,MAAE,EAAAT,WAAe;EAClE,OAAM,eAAQU,GAAA,CAAAC,OAAA;IAAAC,OAAA,EAAAT,YAAA;IAAAP,SAAA;IAAAiB,QAAA,iBAAAH,GAAA,CACR,UACN;MACQd,SAAS,EAAAkB,OAAM,CAAAf,KAAA,CAAAgB,IAAA,EAAgBnB,SAAA;MAC/BoB,OAAO,EAAAA,CAAA,KAAAC,eAAA,CAAApB,WAAA,EAAAO,eAAA;MACP,GAAGH,IAAA;MACHC,GAAA;MACDW,QAAA,iBAAAH,GAAA;QAAAd,SAAA,EAAAG,KAAA,CAAAD,KAAA;QAAAe,QAAA,EAAAf;MAAA;IACF,CACF;EAAA;AACD,CACF;AACAJ,kBAAkB,CAAAwB,WAAW,GAAG;AAChCC,iBAAA,CAAAD,WAAsB,uBAAc;AACxBE,qBAAa,CAAAF,WAAc,2BAAoB;AAC3D,MAAEG,SAAU,GAAAC,MAAA,CAAAC,MAAiB,CAAA7B,kBAAA;EAC3B8B,QAAA,EAAAL,iBAAc;EACfM,YAAA,EAAAL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}